{"ast":null,"code":"var _jsxFileName = \"/Users/projects/React-assigenment5/my-app/src/components/UpperComp.jsx\";\nimport React from 'react';\nimport ClickCounter from './ClickCounter';\nimport HoverCounter from './HoverCounter';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst UpperComp = () => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"upper\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"\\uD83D\\uDC49 Higher order Components \\uD83D\\uDC48\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 8,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: [/*#__PURE__*/_jsxDEV(\"li\", {\n        children: \"\\uD83D\\uDCA1 Higher order components are advanced technique for reusing component logic.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 10,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n        children: \"Basically,its a function that takes a component and returns a new component.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 11,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n        children: \"it is easy to handle\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 12,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n        children: \"gets rid of copying the same logic in every component.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 13,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n        children: \"it makes our code more readable.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 14,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 9,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(ClickCounter, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(HoverCounter, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"\\uD83D\\uDCA1\", /*#__PURE__*/_jsxDEV(\"span\", {\n        children: \" Explanation\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 18,\n        columnNumber: 14\n      }, this), \"-both the button click and text hover have the same functionality where a state is getting updated.hence,instead of writing the same logic for both of them,make a separate higher order component and write the logic there.Now,pass both click and hover component as argument into higher order component which will assign some state and functionality to them and return a new component.\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 7,\n    columnNumber: 5\n  }, this);\n};\n\n_c = UpperComp;\nexport default UpperComp;\n\nvar _c;\n\n$RefreshReg$(_c, \"UpperComp\");","map":{"version":3,"names":["React","ClickCounter","HoverCounter","UpperComp"],"sources":["/Users/projects/React-assigenment5/my-app/src/components/UpperComp.jsx"],"sourcesContent":["import React from 'react'\nimport ClickCounter from './ClickCounter'\nimport HoverCounter from './HoverCounter'\n\nconst UpperComp = () => {\n  return (\n    <div className=\"upper\">\n        <h1>ðŸ‘‰ Higher order Components ðŸ‘ˆ</h1>\n        <ul>\n            <li>ðŸ’¡ Higher order components are advanced technique for reusing component logic.</li>\n            <li>Basically,its a function that takes a component and returns a new component.</li>\n            <li>it is easy to handle</li>\n            <li>gets rid of copying the same logic in every component.</li>\n            <li>it makes our code more readable.</li>\n        </ul>\n        <ClickCounter/>\n        <HoverCounter/>\n        <p>ðŸ’¡<span> Explanation</span>-both the button click and text hover have the same functionality where a state is getting updated.hence,instead of writing the same logic for both of them,make a separate higher order component and write the logic there.Now,pass both click and hover component as argument into higher order component which will assign some state and functionality to them and return a new component.</p>\n    </div>\n  )\n}\n\nexport default UpperComp"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,YAAP,MAAyB,gBAAzB;AACA,OAAOC,YAAP,MAAyB,gBAAzB;;;AAEA,MAAMC,SAAS,GAAG,MAAM;EACtB,oBACE;IAAK,SAAS,EAAC,OAAf;IAAA,wBACI;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QADJ,eAEI;MAAA,wBACI;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QADJ,eAEI;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QAFJ,eAGI;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QAHJ,eAII;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QAJJ,eAKI;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QALJ;IAAA;MAAA;MAAA;MAAA;IAAA,QAFJ,eASI,QAAC,YAAD;MAAA;MAAA;MAAA;IAAA,QATJ,eAUI,QAAC,YAAD;MAAA;MAAA;MAAA;IAAA,QAVJ,eAWI;MAAA,wCAAK;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QAAL;IAAA;MAAA;MAAA;MAAA;IAAA,QAXJ;EAAA;IAAA;IAAA;IAAA;EAAA,QADF;AAeD,CAhBD;;KAAMA,S;AAkBN,eAAeA,SAAf"},"metadata":{},"sourceType":"module"}